
FsWasm -- Notes
===============


DESIGN ISSUES - decide how to do.
=============

[X] call table indirect -- TODO

[X] goto index not yet implemented -- TODO

[ ] Decide new name for "Wasm2" - something proprietary.

[ ] Review naming since moving WASM to trees, where the instructions
    that have operands *bind* them as child sub-tree fields.

[X] Sort out Optimise (which got commented out when doing the trees).
	
	
	

CODE
====

[ ] We have a bug in the code output, in that long stretches get REVERSED

[ ] No longer need +++ because can use @

[X] The "--- Elems section ---" is messy in the unitTestSerialisation text.

[X] Now that we've moved to subtrees representation, the code in the unitTestSerialisation is messy.

[ ] Need local-label numbering to be unique across all functions in case of br_table.

[ ] Generate a VAR section for the WASM Linear Memory.

[ ] Need to generate code to copy the init data into the Linear Memory.

[X] Is "data label24" correct in the switch lookup?  YES
[ ] Rename "data label24" as "data wasm_brtable_24" ?

[ ] Optimise:  Eliminate push-constant by hoisting.  Very easy now we have tree representation.
    So we don't waste time pushing constants onto the stack
    if they are just going to be operands for ADD etc...  Maybe can use "add A,1".

[ ] Optimise to use 386OS ASM push-constant:
    let A=20
    push A                ->    push 20
	
[ ] Optimise:   cmp B,A:if > goto label2
    cmp B,A:set > A
    cmp A,0:if nz goto label2
	
[ ] 386OS ASM may need more "traditional" labels scheme, to support 
    pointers into a function body (bt_table).

[ ] Separate the F# listing files a bit.  The following file is troubling:
    C:\Users\Jonathan\Documents\Work\FsWasm\FsWasmLibrary\PrivateWasm2ToSimpleReg32.fs

[ ] Wasm2:  Merge TableOfAddresses into GotoIndex??

[X] Need fetch/store to be dynamically relocated to target the Linear Memory.

		Idea 1:
		
		Use Y register to point to base of memory.
		We could do:
			pop B:store   replace with ->   pop B:add B,Y:store
			pop A:fetch   replace with ->   pop A:add A,Y:fetch


