
FsWasm -- Notes
===============


INVESTIGATION
=============

[ ] Need a GCC -> WASM toolchain setting up on the Linux box.
    Test this system.




DESIGN ISSUES - decide how to do.
=============

[ ] We do not allow the hosting assembler program to use multiple WASM modules, as this
    translator would generate name-clashes.  (Only allowing one WASM
	module per host).

[ ] Decide new name for "Wasm2" - something proprietary.

[ ] Review naming since moving WASM to trees, where the instructions
    that have operands *bind* them as child sub-tree fields.

[ ] Idea: Output -- annotate code with commentary eg:  // Prepare wasm_fn1 / Param1:
	
[ ] Look at whether to insert extra line-gaps in the output ASM

[ ] A test framework (integration level) is needed.	

	
	

CODE
====

[ ] Need the output to be in the correct order!  Currently we mix three streams.
    Separate program to re-order the output?

^^^ MUST RELEASE ^^^

[ ] Could we word-align the data sections, and copy them in word-at-a-time rather 
    than byte-at-a-time?
	
[ ] Separate the F# listing files a bit.  The following file is troubling:
    C:\Users\Jonathan\Documents\Work\FsWasm\FsWasmLibrary\PrivateWasm2ToSimpleReg32.fs

[ ] Sort out the writeIns:  We have multiple instances where we specify four spaces.

[ ] Optimise to use 386OS ASM push-constant:
    let A=20
    push A                ->    push 20
	
[ ] Optimise:   cmp B,A:if > goto label2
    cmp B,A:set > A
    cmp A,0:if nz goto label2
	
[ ] Optimise: Compare-With-Constant	
	
	
	
	
	
	
	
	
	
COMPLETE
========	


[X] We are missing register barriers after some labels (after => label3):

    // ~~~ register barrier ~~~
=> label3
    let A=int[@loc1]
    push A

[X] Need to generate "pop A" at end of a function that returns a single value.

    let A=0
    push A
    // ~~~ register barrier ~~~
=> label1
ret

[X] We have a bug in the code output, in that long stretches get REVERSED

[X] No longer need +++ because can use @

[X] The "--- Elems section ---" is messy in the unitTestSerialisation text.

[X] Now that we've moved to subtrees representation, the code in the unitTestSerialisation is messy.

[X] Is "data label24" correct in the switch lookup?  YES

[X] Optimise:  Eliminate push-constant by hoisting.  Very easy now we have tree representation.
    So we don't waste time pushing constants onto the stack
    if they are just going to be operands for ADD etc...  Maybe can use "add A,1".


[X] Wasm2:  Merge TableOfAddresses into GotoIndex??

[X] Need fetch/store to be dynamically relocated to target the Linear Memory.

		Idea 1:
		
		Use Y register to point to base of memory.
		We could do:
			pop B:store   replace with ->   pop B:add B,Y:store
			pop A:fetch   replace with ->   pop A:add A,Y:fetch


[X] call table indirect -- TODO

[X] goto index not yet implemented -- TODO

[X] Sort out Optimise (which got commented out when doing the trees).

[X] Need local-label numbering to be unique across all functions to support br_table.

[X] Generate a VAR section for the WASM Linear Memory.

[X] Need to generate code to copy the init data into the Linear Memory.

[X] Need to load the Y register to point to the linear memory.
[X] Reload the Y register to point to the linear memory on return from a call to an import.

[X] REVERTED THIS -->  Need to load the stack pointer at linear memory offset 4.

[X] Rename "data label24" as "data wasm_brtable_24" ?

[X] 386OS ASM may need more "traditional" labels scheme, to support 
    pointers into a function body (bt_table).

[X] Raise error on Custom sections being present.

[X] Catch exceptions at base, and report the file that was being interpreted at the time.

